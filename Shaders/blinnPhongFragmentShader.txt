#version 400

uniform vec3 ka;
uniform vec3 kd;
uniform vec3 ks;
uniform float spec_ex;

uniform sampler2D basic_texture;
uniform bool has_texture;
in vec2 texture_coordinates;


uniform vec3 La;
uniform vec3 Ld; 
uniform vec3 Ls; 

in vec3 N;
in vec3 L;
//in vec3 R;
//in vec3 V;
in vec3 H;

void main()
{
	vec3 _N = normalize(N);
	vec3 _L = normalize(L);
//	vec3 _R = normalize(R);
//	vec3 _V = normalize(V);
	vec3 _H = normalize(H);

	vec3 Ia = La * ka;

	float dot_diffuse = dot(_L, _N);
	dot_diffuse = max(dot_diffuse, 0.0f);

	vec3 Id = Ld * kd * dot_diffuse;




	float dot_spec = dot (_N, _H);

	dot_spec = max (dot_spec, 0.0);

	float bp_spec_ex = spec_ex * 4;
	float specular_factor = pow (dot_spec, bp_spec_ex);

	vec3 Is = Ls * ks * specular_factor; // final specular intensity
	





	vec3 LightIntensity = Ia + Id + Is;


	vec4 texel;

	if(has_texture)
		texel = texture2D(basic_texture, texture_coordinates);
	else
		texel = vec4(1.0f, 1.0f, 1.0f, 1.0f);

	gl_FragColor = texel * vec4 (LightIntensity, 1.0);

}